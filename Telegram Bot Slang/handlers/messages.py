# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from core.huggingface_translator import hf_translator
from config.keyboards import get_main_keyboard, get_back_keyboard
from utils.formatters import format_welcome, format_help
from config.config import EMOJI

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
def get_global_vars():
    from main import user_modes, user_stats, user_sessions
    return user_modes, user_stats, user_sessions

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = format_welcome()
    await update.message.reply_text(
        welcome_text, 
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = format_help()
    await update.message.reply_text(
        help_text,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_modes, user_stats, user_sessions = get_global_vars()
    user_id = update.message.from_user.id
    
    if user_id not in user_stats:
        stats_text = f"{EMOJI['stats']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞</b>\n\n–ù–∞—á–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! {EMOJI['rocket']}"
    else:
        stats = user_stats[user_id]
        stats_text = f"""
{EMOJI['chart']} <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b> {EMOJI['chart']}

{EMOJI['translate']} <b>–ü–µ—Ä–µ–≤–æ–¥—ã:</b> {stats.get('total_translations', 0)}
{EMOJI['fire']} <b>–°–ª–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:</b> {stats.get('words_translated', 0)}

{EMOJI['slang']} <b>–°–ª–µ–Ω–≥ ‚Üí –ù–æ—Ä–º–∞:</b> {stats.get('slang_to_normal', 0)}
{EMOJI['normal']} <b>–ù–æ—Ä–º–∞ ‚Üí –°–ª–µ–Ω–≥:</b> {stats.get('normal_to_slang', 0)}

{EMOJI['time']} <b>–ê–∫—Ç–∏–≤–µ–Ω —Å:</b> {stats.get('first_use', '—Å–µ–≥–æ–¥–Ω—è')}
"""
    
    await update.message.reply_text(
        stats_text,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    from config.keyboards import get_quiz_keyboard
    quiz_text = f"""
{EMOJI['brain']} <b>–í–ò–ö–¢–û–†–ò–ù–ê –ü–û –°–õ–ï–ù–ì–£</b> {EMOJI['tada']}

üéØ <b>–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!</b>
‚Ä¢ –£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–µ–Ω–≥–æ–≤—ã—Ö —Å–ª–æ–≤
‚Ä¢ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤  
‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é

{EMOJI['star']} <b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?</b>
"""
    await update.message.reply_text(
        quiz_text,
        reply_markup=get_quiz_keyboard(),
        parse_mode='HTML'
    )

async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–ª–æ–≤"""
    query = update.message.text
    search_result = f"{EMOJI['mag']} <b>–ü–û–ò–°–ö: '{query}'</b>\n\n"
    search_result += "üîç –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
    search_result += "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!"
    
    await update.message.reply_text(
        search_result,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

async def handle_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    user_modes, user_stats, user_sessions = get_global_vars()
    user_id = update.message.from_user.id
    text = update.message.text
    
    if user_id not in user_modes:
        await update.message.reply_text(
            f"{EMOJI['bulb']} <b>–°–ù–ê–ß–ê–õ–ê –í–´–ë–ï–†–ò –†–ï–ñ–ò–ú!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ {EMOJI['zap']}",
            parse_mode='HTML'
        )
        return

    mode = user_modes[user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    processing_msg = await update.message.reply_text(f"{EMOJI['brain']} –ù–µ–π—Ä–æ—Å–µ—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å –ø–æ–º–æ—â—å—é Hugging Face
    translated_text = hf_translator.translate_with_ai(text, mode)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from main import update_stats
    update_stats(user_id, mode, 1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    direction_emoji = EMOJI['slang'] if mode == "slang_to_normal" else EMOJI['normal']
    direction_text = "—Å–ª–µ–Ω–≥ ‚Üí –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π" if mode == "slang_to_normal" else "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí —Å–ª–µ–Ω–≥"
    
    response = f"""
{direction_emoji} <b>–ù–ï–ô–†–û-–ü–ï–†–ï–í–û–î</b> {EMOJI['robot']}

üìù <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<code>{text}</code>

üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
<code>{translated_text}</code>

üí´ <i>–†–µ–∂–∏–º: {direction_text}</i>
<i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: Hugging Face (RUT5)</i>
"""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await processing_msg.delete()
    await update.message.reply_text(
        response,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

async def handle_random_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    examples_text = f"""
{EMOJI['brain']} <b>–ü–†–ò–ú–ï–†–´ –î–õ–Ø –ù–ï–ô–†–û–°–ï–¢–ò</b>

ü§ñ <b>–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Hugging Face –¥–ª—è —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞</b>

{EMOJI['flash']} <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ <code>–≠—Ç–æ—Ç –≤–∏–¥–æ—Å –ø—Ä–æ—Å—Ç–æ –∫—Ä–∏–Ω–∂–æ–≤—ã–π</code>
‚Ä¢ <code>–ì–æ –≤ –¥–∏—Å–∫–æ—Ä–¥ —á–∏–ª–∏—Ç—å</code>  
‚Ä¢ <code>–£ –Ω–∞—Å —Ç—É—Ç –∏–º–±–æ–≤—ã–π –≤–∞–π–±</code>
‚Ä¢ <code>–ù–µ –∞–≥—Ä–∏—Å—å –ø–æ –ø—É—Å—Ç—è–∫–∞–º</code>

{EMOJI['zap']} <b>–ù–µ–π—Ä–æ—Å–µ—Ç—å —É–º–µ–µ—Ç:</b>
‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–º—ã—Å–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å —Ä–µ—á–∏
"""
    await update.message.reply_text(
        examples_text,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

async def handle_top_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    popular_text = f"""
{EMOJI['crown']} <b>–ü–û–ü–£–õ–Ø–†–ù–´–ï –ó–ê–ü–†–û–°–´</b>

{EMOJI['fire']} <b>–ß–∞—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥—è—Ç:</b>
‚Ä¢ –ö—Ä–∏–Ω–∂, —Ä–æ—Ñ–ª, –∫—Ä–∞—à
‚Ä¢ –ê–≥—Ä–∏—Ç—å—Å—è, —á–∏–ª–∏—Ç—å, —Ñ–ª–µ–∫—Å–∏—Ç—å  
‚Ä¢ –í–∞–π–±, –∏–º–±–∞, –ø—Ä—É—Ñ
‚Ä¢ –ì–æ, –≤–∏–¥–æ—Å, —á–µ–ª

{EMOJI['bulb']} <b>–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–Ω–∏–º–∞–µ—Ç:</b>
‚Ä¢ –õ—é–±—ã–µ —Å–ª–µ–Ω–≥–æ–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –î–∞–∂–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!
"""
    await update.message.reply_text(
        popular_text,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

def register_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    application.add_handler(CommandHandler("start", handle_start))
    application.add_handler(CommandHandler("stats", handle_stats))
    application.add_handler(CommandHandler("help", handle_help))
    application.add_handler(CommandHandler("quiz", handle_quiz))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation))