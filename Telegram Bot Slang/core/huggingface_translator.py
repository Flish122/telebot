# -*- coding: utf-8 -*-
import requests
import logging
import os
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class YandexTranslator:
    def __init__(self):
        self.api_key = os.getenv("YANDEX_API_KEY")
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex Translate API")
        
    def translate_with_ai(self, text, direction):
        """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Yandex API - –†–ï–ê–õ–¨–ù–û –†–ê–ë–û–¢–ê–ï–¢"""
        if not self.api_key or not self.folder_id:
            return f"{text} ‚ö†Ô∏è (–Ω–∞—Å—Ç—Ä–æ–π API –∫–ª—é—á–∏)"
        
        try:
            # Yandex —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç
            target_lang = "ru"  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–π, –Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
            
            url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
            
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Api-Key {self.api_key}"
            }
            
            data = {
                "texts": [text],
                "targetLanguageCode": target_lang,
                "folderId": self.folder_id,
                "speller": True,  # –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏
                "format": "PLAIN_TEXT"
            }
            
            response = requests.post(url, json=data, headers=headers, timeout=10)
            
            if response.status_code == 200:
                translated = response.json()['translations'][0]['text']
                
                # –î–ª—è —Å–ª–µ–Ω–≥–∞ ‚Üí –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if direction == "slang_to_normal":
                    translated = self._make_more_formal(translated)
                else:
                    translated = self._make_more_slang(translated)
                    
                return translated
            else:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
                return f"{text} ‚ö†Ô∏è (–æ—à–∏–±–∫–∞ API)"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex API: {e}")
            return f"{text} ‚ö†Ô∏è (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)"
    
    def _make_more_formal(self, text):
        """–î–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º (–¥–æ–ø –æ–±—Ä–∞–±–æ—Ç–∫–∞)"""
        informal_to_formal = {
            "–∑–¥–∞—Ä–æ–≤–∞": "–ø—Ä–∏–≤–µ—Ç", "–∫—É": "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π": "–ø—Ä–∏–≤–µ—Ç",
            "–≥–æ": "–¥–∞–≤–∞–π", "—Å–ø—Å": "—Å–ø–∞—Å–∏–±–æ", "–ø–∞—Å–∏–±": "—Å–ø–∞—Å–∏–±–æ",
            "–ø–∂": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–æ–∫": "—Ö–æ—Ä–æ—à–æ", "–Ω–æ—Ä–º": "–Ω–æ—Ä–º–∞–ª—å–Ω–æ",
            "—â–∞—Å": "—Å–µ–π—á–∞—Å", "—á–µ–ª": "—á–µ–ª–æ–≤–µ–∫", "–æ—Ñ–∫": "–∫–æ–Ω–µ—á–Ω–æ"
        }
        
        result = text.lower()
        for informal, formal in informal_to_formal.items():
            if informal in result:
                result = result.replace(informal, formal)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        if text and text[0].isupper():
            result = result.capitalize()
            
        return result
    
    def _make_more_slang(self, text):
        """–î–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º (–¥–æ–ø –æ–±—Ä–∞–±–æ—Ç–∫–∞)"""
        formal_to_informal = {
            "–ø—Ä–∏–≤–µ—Ç": "–∑–¥–∞—Ä–æ–≤–∞", "–¥–∞–≤–∞–π": "–≥–æ", "—Å–ø–∞—Å–∏–±–æ": "—Å–ø—Å",
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–ø–∂", "—Ö–æ—Ä–æ—à–æ": "–æ–∫", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ": "–Ω–æ—Ä–º",
            "—Å–µ–π—á–∞—Å": "—â–∞—Å", "—á–µ–ª–æ–≤–µ–∫": "—á–µ–ª", "–∫–æ–Ω–µ—á–Ω–æ": "–æ—Ñ–∫"
        }
        
        result = text.lower()
        for formal, informal in formal_to_informal.items():
            if formal in result:
                result = result.replace(formal, informal)
        
        if text and text[0].isupper():
            result = result.capitalize()
            
        return result

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex API
hf_translator = YandexTranslator()