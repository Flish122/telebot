# -*- coding: utf-8 -*-
import json
import os
import sys

print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê")
print("=" * 50)

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
print("üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
for root, dirs, files in os.walk(BASE_DIR):
    level = root.replace(BASE_DIR, '').count(os.sep)
    indent = ' ' * 2 * level
    print(f'{indent}{os.path.basename(root)}/')
    subindent = ' ' * 2 * (level + 1)
    for file in files:
        if file.endswith('.py') or file.endswith('.json'):
            print(f'{subindent}{file}')

print("\n" + "=" * 50)

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
print("üìç –ü–†–û–í–ï–†–ö–ê –ü–£–¢–ï–ô:")
DICTIONARY_PATH = os.path.join(BASE_DIR, "data", "slang_dictionary.json")
print(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {DICTIONARY_PATH}")
print(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DICTIONARY_PATH)}")

# 3. –ò—â–µ–º —Å–ª–æ–≤–∞—Ä—å
print("\nüîç –ü–û–ò–°–ö –°–õ–û–í–ê–†–Ø:")
found_dicts = []
for root, dirs, files in os.walk(BASE_DIR):
    for file in files:
        if 'dictionary' in file.lower() and file.endswith('.json'):
            full_path = os.path.join(root, file)
            found_dicts.append(full_path)
            print(f"–ù–∞–π–¥–µ–Ω: {full_path}")

if found_dicts:
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    ACTUAL_DICT_PATH = found_dicts[0]
    print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å: {ACTUAL_DICT_PATH}")
else:
    print("‚ùå –°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è
print("\nüìñ –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –°–õ–û–í–ê–†–Ø:")
try:
    with open(ACTUAL_DICT_PATH, "r", encoding="utf-8") as f:
        dictionary_data = json.load(f)
    
    print(f"‚úÖ –°–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω: {len(dictionary_data)} —Å–ª–æ–≤")
    print("–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤:")
    for i, (key, value) in enumerate(list(dictionary_data.items())[:10]):
        print(f"  {i+1}. '{key}' ‚Üí '{value}'")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
print("\nüß™ –¢–ï–°–¢ –ü–ï–†–ï–í–û–î–ê:")
def test_translate(text, mode):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    words_found = []
    
    if mode == "slang_to_normal":
        for slang, normal in dictionary_data.items():
            if slang in text.lower():
                words_found.append((slang, normal))
                text = text.replace(slang, f"**{normal}**")
    
    return text, len(words_found) > 0, words_found

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
test_phrases = ["–≥–æ", "–∫—Ä–∏–Ω–∂", "–∞–≥—Ä–∏—Ç—å—Å—è", "–ø—Ä–∏–≤–µ—Ç"]
for phrase in test_phrases:
    translated, found, words = test_translate(phrase, "slang_to_normal")
    status = "‚úÖ –ù–ê–ô–î–ï–ù–û" if found else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û"
    print(f"{status} '{phrase}' ‚Üí {translated}")
    if words:
        print(f"   –ù–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞: {words}")

print("\n" + "=" * 50)
print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")